<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Docker on ExitCode0</title><link>https://exitcode0.net/tags/docker/</link><description>Recent content in Docker on ExitCode0</description><generator>Hugo -- 0.134.0</generator><language>en-gb</language><lastBuildDate>Sun, 07 Jan 2024 17:00:00 +0100</lastBuildDate><atom:link href="https://exitcode0.net/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Home Assistant HTTPS Certificates with Tailscale, Traefik and CoreDNS</title><link>https://exitcode0.net/posts/homeassistant-tls-with-tailscale-traefik/</link><pubDate>Sun, 07 Jan 2024 17:00:00 +0100</pubDate><guid>https://exitcode0.net/posts/homeassistant-tls-with-tailscale-traefik/</guid><description>&lt;p>In previous posts, I&amp;rsquo;ve explained how to use Tailscale&amp;rsquo;s MagicDNS and HTTPS certificate feature to generate a TLS cert for your Home Assistant install: &lt;a href="../homeassistant-tls-with-tailscale">Homeassistant Enable MagicDNS and HTTPS Certificates in Tailscale&lt;/a>. That setup required you to reformat the TLS cert and copy it to the Home Assistant container&amp;hellip; it wouldn&amp;rsquo;t be to much of a task to automate those actions, but fortunately there is now a superior method of applying and renewing a Tailscale cert for HASS (and many other self-hosted services). Let us dig in to that&amp;hellip;&lt;/p></description></item><item><title>Automating Postgres Deployment with Docker Compose and Init Scripts</title><link>https://exitcode0.net/posts/automating-postgres-deployment/</link><pubDate>Sat, 06 Jan 2024 12:00:00 +0100</pubDate><guid>https://exitcode0.net/posts/automating-postgres-deployment/</guid><description>&lt;h2 id="introduction-to-running-postgresql-in-a-docker-container-using-docker-compose">Introduction to Running PostgreSQL in a Docker Container using Docker Compose&lt;/h2>
&lt;p>In this blog post, we will explore how to run &lt;a href="https://www.postgresql.org/">PostgreSQL&lt;/a> in a Docker container using &lt;a href="https://docs.docker.com/compose/">Docker Compose&lt;/a>. We will also break down and explain the &lt;code>init-user-db.sh&lt;/code> script that is executed at startup to initialize the PostgreSQL tables. Running PostgreSQL in a Docker container provides several benefits, including ease of deployment, portability, and isolation. So let&amp;rsquo;s dive in and understand the process!&lt;/p></description></item><item><title>Honeygain docker-compose setup</title><link>https://exitcode0.net/posts/honeygain-docker-compose-setup/</link><pubDate>Thu, 04 Mar 2021 15:20:13 +0000</pubDate><guid>https://exitcode0.net/posts/honeygain-docker-compose-setup/</guid><description>&lt;p>&lt;a href="https://r.honeygain.me/TOM30548" title="https://r.honeygain.me/TOM30548">&lt;img loading="lazy" src="https://i2.wp.com/exitcode0.net/wp-content/uploads/2021/03/honeygain-compose.png?resize=272%2C272&amp;amp;ssl=1" alt="honeygain docker-compose -yaml example" />
&lt;/a>
So &lt;a href="https://r.honeygain.me/TOM30548" title="https://r.honeygain.me/TOM30548">Honeygain&lt;/a> has finally arrived as a Docker container and this article will give you everything you need to build your own docker-compose YAML file for faster deployments.&lt;/p>
&lt;p>You can see the docs provided by the Honeygain devs on the matter here:&lt;/p>
&lt;p>&lt;a href="https://honeygain.zendesk.com/hc/en-us/articles/360018979919-How-to-run-Honeygain-on-Docker-Linux-" title="https://honeygain.zendesk.com/hc/en-us/articles/360018979919-How-to-run-Honeygain-on-Docker-Linux-">https://honeygain.zendesk.com/hc/en-us/articles/360018979919-How-to-run-Honeygain-on-Docker-Linux-&lt;/a>&lt;/p>
&lt;p>However, they do not provide a nice way to deploy time and again from a docker-compose file, scroll down for a template! At the time of writing, you are permitted to run the service on two devices per public IP. Unfortunately, the docker image doesn’t currently support the content delivery feature&lt;/p></description></item><item><title>[SOLVED] - Running Docker on a Raspberry Pi 4</title><link>https://exitcode0.net/posts/solved-running-docker-on-a-raspberry-pi-4/</link><pubDate>Wed, 10 Jul 2019 08:26:25 +0000</pubDate><guid>https://exitcode0.net/posts/solved-running-docker-on-a-raspberry-pi-4/</guid><description>&lt;p>&lt;strong>The Raspberry Pi 4 has now been released offering up to 4GB of RAM! All of the horsepower required for an excellent lower power, docker host.&lt;/strong>&lt;/p>
&lt;p>&lt;img loading="lazy" src="https://i2.wp.com/exitcode0.net/wp-content/uploads/2019/07/Pi4-Docker.png?resize=774%2C492" alt="Pi4 Running Docker" />
However, there are currently issues undergoing work which prevent docker from running on the only Rasbian image currently available for the Pi 4 – ‘&lt;a href="https://www.raspberrypi.org/downloads/raspbian/" title="https://www.raspberrypi.org/downloads/raspbian/">Rasbian Buster&lt;/a>‘. Details of these issues can been found here on the GitHub thread – &lt;a href="https://github.com/docker/for-linux/issues/709" title="https://github.com/docker/for-linux/issues/709">https://github.com/docker/for-linux/issues/709&lt;/a>&lt;/p></description></item></channel></rss>