<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Scripts on ExitCode0</title><link>https://exitcode0.net/tags/scripts/</link><description>Recent content in Scripts on ExitCode0</description><generator>Hugo -- 0.134.3</generator><language>en-gb</language><lastBuildDate>Wed, 13 Feb 2019 09:00:15 +0000</lastBuildDate><atom:link href="https://exitcode0.net/tags/scripts/index.xml" rel="self" type="application/rss+xml"/><item><title>Modifying Windows shortcuts is Powershell</title><link>https://exitcode0.net/posts/modifying-windows-shortcuts-is-powershell/</link><pubDate>Wed, 13 Feb 2019 09:00:15 +0000</pubDate><guid>https://exitcode0.net/posts/modifying-windows-shortcuts-is-powershell/</guid><description>&lt;p>&lt;img loading="lazy" src="https://i0.wp.com/exitcode0.net/wp-content/uploads/2019/02/PowerShell_5.0_icon-150x150.png?resize=150%2C150&amp;amp;ssl=1" alt="PowerShell_5.0_icon" />
I once faced a rather tedious task that involved recursively modifying a number of shortcut paths stored across a convoluted folder structure. There was approximately 100 shortcuts which needed part of their path modifying.&lt;/p>
&lt;p>The answer: &lt;strong>Create a****PowerShell script.&lt;/strong>&lt;/p>
&lt;p>The following code utilises regex to check for the existence of a string and modify with the define replacement. It is easily possible to use Read-Host to make this a little bit more interactive, but the purposes of my use-case it was just as simple to modify these variables before running the script.&lt;/p></description></item><item><title>Powershell - Checking the Language Mode</title><link>https://exitcode0.net/posts/powershell-checking-the-language-mode/</link><pubDate>Tue, 05 Feb 2019 09:00:49 +0000</pubDate><guid>https://exitcode0.net/posts/powershell-checking-the-language-mode/</guid><description>&lt;p>For security purposes, it is possible to control the language mode in a given Powershell session. These language modes can constrict which modules can be loaded during the life of a powershell session.&lt;/p>
&lt;p>Learn mode about Powershell langeuage modes: &lt;strong>&lt;a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_language_modes?view=powershell-6" title="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_language_modes?view=powershell-6">About Language Modes – Microsoft&lt;/a>&lt;/strong>&lt;/p>
&lt;h2 id="detect-the-current-language-mode">Detect the Current Language Mode&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>$sLangMode: $ExecutionContext.SessionState.LanguageMode&lt;/strong>&lt;/p>
&lt;p>If ($sLangMode -ne “FullLanguage”){&lt;/p>
&lt;p>Write-Host ” !! Unable to run scrit – Powershell Using Wrong Language Mode !! ”&lt;/p>
&lt;p>}&lt;/p>
&lt;p>Else{&lt;/p></description></item><item><title>'Copy, Paste' With Powershell Sendkeys</title><link>https://exitcode0.net/posts/copy-paste-with-powershell-sendkeys/</link><pubDate>Sat, 02 Feb 2019 22:17:39 +0000</pubDate><guid>https://exitcode0.net/posts/copy-paste-with-powershell-sendkeys/</guid><description>&lt;p>This is really quick nugget of Powershell for anyone who is struggling to copy and paste into a particular window or dialog box.&lt;/p>
&lt;p>Perhaps it is a case of a website which prevents text form being sent to a field from the clipboard, or in my case, a windows UAC prompt. If you are following password best practices, your passwords should be long, complex and contain zero dictionary words. Furthermore, you should have a different password for every site and service. &lt;strong>So&lt;/strong>, when a user interface doesn’t allow you to paste a password, life gets that little bit more difficult.&lt;/p></description></item></channel></rss>