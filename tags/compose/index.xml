<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Compose on ExitCode0</title><link>https://exitcode0.net/tags/compose/</link><description>Recent content in Compose on ExitCode0</description><generator>Hugo -- 0.128.1</generator><language>en-gb</language><lastBuildDate>Sun, 07 Jan 2024 17:00:00 +0100</lastBuildDate><atom:link href="https://exitcode0.net/tags/compose/index.xml" rel="self" type="application/rss+xml"/><item><title>Home Assistant HTTPS Certificates with Tailscale, Traefik and CoreDNS</title><link>https://exitcode0.net/posts/homeassistant-tls-with-tailscale-traefik/</link><pubDate>Sun, 07 Jan 2024 17:00:00 +0100</pubDate><guid>https://exitcode0.net/posts/homeassistant-tls-with-tailscale-traefik/</guid><description>In previous posts, I&amp;rsquo;ve explained how to use Tailscale&amp;rsquo;s MagicDNS and HTTPS certificate feature to generate a TLS cert for your Home Assistant install: Homeassistant Enable MagicDNS and HTTPS Certificates in Tailscale. That setup required you to reformat the TLS cert and copy it to the Home Assistant container&amp;hellip; it wouldn&amp;rsquo;t be to much of a task to automate those actions, but fortunately there is now a superior method of applying and renewing a Tailscale cert for HASS (and many other self-hosted services).</description></item><item><title>Automating Postgres Deployment with Docker Compose and Init Scripts</title><link>https://exitcode0.net/posts/automating-postgres-deployment/</link><pubDate>Sat, 06 Jan 2024 12:00:00 +0100</pubDate><guid>https://exitcode0.net/posts/automating-postgres-deployment/</guid><description>Introduction to Running PostgreSQL in a Docker Container using Docker Compose In this blog post, we will explore how to run PostgreSQL in a Docker container using Docker Compose. We will also break down and explain the init-user-db.sh script that is executed at startup to initialize the PostgreSQL tables. Running PostgreSQL in a Docker container provides several benefits, including ease of deployment, portability, and isolation. So let&amp;rsquo;s dive in and understand the process!</description></item></channel></rss>