<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Postgres on ExitCode0</title><link>https://exitcode0.net/categories/postgres/</link><description>Recent content in Postgres on ExitCode0</description><generator>Hugo -- 0.140.2</generator><language>en-gb</language><lastBuildDate>Sat, 06 Jan 2024 12:00:00 +0100</lastBuildDate><atom:link href="https://exitcode0.net/categories/postgres/index.xml" rel="self" type="application/rss+xml"/><item><title>Automating Postgres Deployment with Docker Compose and Init Scripts</title><link>https://exitcode0.net/posts/automating-postgres-deployment/</link><pubDate>Sat, 06 Jan 2024 12:00:00 +0100</pubDate><guid>https://exitcode0.net/posts/automating-postgres-deployment/</guid><description>&lt;h2 id="introduction-to-running-postgresql-in-a-docker-container-using-docker-compose">Introduction to Running PostgreSQL in a Docker Container using Docker Compose&lt;/h2>
&lt;p>In this blog post, we will explore how to run &lt;a href="https://www.postgresql.org/">PostgreSQL&lt;/a> in a Docker container using &lt;a href="https://docs.docker.com/compose/">Docker Compose&lt;/a>. We will also break down and explain the &lt;code>init-user-db.sh&lt;/code> script that is executed at startup to initialize the PostgreSQL tables. Running PostgreSQL in a Docker container provides several benefits, including ease of deployment, portability, and isolation. So let&amp;rsquo;s dive in and understand the process!&lt;/p></description></item></channel></rss>